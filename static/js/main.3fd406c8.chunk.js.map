{"version":3,"sources":["apiConfig.ts","api/CountriesAPI.ts","api/RestCountriesAPI.ts","components/CountryListItem.tsx","components/Search.tsx","components/SelectedCountries.tsx","components/DisplayAlert.tsx","ListSearchApp.tsx","index.tsx"],"names":["apiUrls","supplementalCountriesUrl","restcountriesUrl","countriesUrl","getCountries","axios","method","url","fetchCountries","name","a","restCountries","fetchRestCountries","then","res","data","catch","err","console","log","supplCountries","fetchSupplementalCountries","uniqueRestCountries","Array","from","Set","map","find","combinedCountries","length","Error","CountryListItem","country","flag","numericCode","buttonDisplay","buttonText","handleClick","ListGroup","Item","Image","src","alt","width","height","thumbnail","Button","variant","className","value","onClick","Search","countryList","pinnedCountries","setCountryList","setSavingFavorites","setLoading","setErrorMessage","setPinnedCountries","loadCountries","countries","slice","error","toString","handlePinCountries","event","currentTarget","getAttribute","isNotPinned","e","padStart","saveCountry","InputGroup","size","FormControl","aria-label","aria-describedby","placeholder","onChange","target","c","index","SelectedCountries","handleUnpinCountries","selectedNumericCode","countryToRemove","id","deleteCountry","finally","newPinnedCountries","filter","DisplayAlert","loading","errorMessage","Alert","Spinner","animation","ListSearchApp","useState","savingFavorites","useEffect","Container","fluid","Row","Col","md","Card","Header","as","Body","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3fd406c8.chunk.js","sourcesContent":["const apiUrls = {\n  supplementalCountriesUrl: 'https://admithub-suppl-countries.herokuapp.com/supplemental/countries/',\n  restcountriesUrl: 'https://restcountries.eu/rest/v2/name/',\n  countriesUrl: 'https://admithub-suppl-countries.herokuapp.com/pinned/countries/',\n}\n\nexport default apiUrls","import axios from 'axios';\nimport apiUrls from '../apiConfig';\nimport { Country } from \"../types/Country\";\n\nexport const getCountries = () => {\n  return axios({\n    method: 'GET',\n    url: apiUrls.countriesUrl\n  });\n}\n\nexport const saveCountry = (country: Country) => {\n  return axios({\n    method: 'POST',\n    url: apiUrls.countriesUrl,\n    data: {\n      \"numericCode\": country.numericCode,\n      \"name\": country.name,\n      \"flag\": country.flag\n    }\n  });\n}\n\n\nexport const deleteCountry = (country: Country) => {\n  if (country) {\n    return axios({\n      method: 'DELETE',\n      url: `${apiUrls.countriesUrl}${country.id}/`,\n    });\n  } else {\n    throw new Error('Country is not valid');\n  }\n}","import axios from 'axios';\nimport apiUrls from \"../apiConfig\";\nimport { Country } from \"../types/Country\";\n\nexport const fetchCountries = async (name: string) => {\n  // Fetch Rest Countries from thirdparty API\n  let restCountries: Country[] = [];\n  await fetchRestCountries(name)\n    .then(res => { restCountries = res.data })\n    .catch(err => console.log(err));\n\n  // Fetch Supplimental Countries from our Backend API\n  let supplCountries: Country[] = [];\n  await fetchSupplementalCountries(name)\n    .then(res => { supplCountries = res.data })\n    .catch(err => console.log(err));\n\n  // Replace duplicate countries from restCountries and supplementCountries with country from supplementCountries\n  const uniqueRestCountries = Array.from(new Set(restCountries.map(a => a.name)))\n    .map(name => {\n      return supplCountries.find(a => a.name === name) ?? restCountries.find(a => a.name === name)\n    })\n\n  // Combine Rest Countries and Supplimental Countries\n  const combinedCountries = [...uniqueRestCountries, ...supplCountries];\n\n  // If return data is empty throw an exception\n  if (name && combinedCountries.length === 0) {\n    throw new Error(`No countries found for input: ${name}`);\n  }\n\n  return combinedCountries;\n}\n\nexport const fetchRestCountries = async (name: string) => {\n  return axios({\n    method: 'GET',\n    url: `${apiUrls.restcountriesUrl}${name}?fields=name;flag;numericCode`\n  });\n}\n\nexport const fetchSupplementalCountries = async (name: string) => {\n  return axios({\n    method: 'GET',\n    url: `${apiUrls.supplementalCountriesUrl}${name}`\n  });\n}","import React from 'react';\nimport Button from 'react-bootstrap/esm/Button';\nimport ListGroup from 'react-bootstrap/esm/ListGroup';\nimport Image from 'react-bootstrap/Image';\n\nexport interface Props {\n  country: string;\n  flag: string;\n  numericCode: number;\n  buttonDisplay: boolean;\n  buttonText: string\n  handleClick: ((event: React.MouseEvent<HTMLElement, MouseEvent>) => void);\n}\n\n/* \nTakes an image URL and a country name, and renders a \nlist item that can be pinned to or removed from the\n\"Selected Countries\" list.\n*/\nconst CountryListItem: React.FC<Props> = ({ country, flag, numericCode, buttonDisplay, buttonText, handleClick }) => {\n  return (\n    <ListGroup.Item>\n      <Image src={flag} alt={country} width=\"50\" height=\"30\" thumbnail />\n      {' '}{country}\n      {buttonDisplay && <Button\n        variant=\"outline-secondary\"\n        className=\"float-right\"\n        value={numericCode}\n        onClick={handleClick}\n      >{buttonText}</Button>}\n    </ListGroup.Item>\n  );\n}\n\nexport default CountryListItem;","import React from \"react\";\n\n// Api imports\nimport { fetchCountries } from '../api/RestCountriesAPI';\nimport { getCountries, saveCountry } from '../api/CountriesAPI';\n\n// Component imports\nimport CountryListItem from \"./CountryListItem\";\n\n// Bootstrap imports\nimport FormControl from 'react-bootstrap/esm/FormControl';\nimport InputGroup from 'react-bootstrap/esm/InputGroup';\nimport ListGroup from \"react-bootstrap/ListGroup\";\n\n// Data types\nimport { Country } from \"../types/Country\";\n\ninterface Props {\n  countryList: Country[],\n  pinnedCountries: Country[],\n  setCountryList: any,\n  setSavingFavorites: any,\n  setLoading: any,\n  setErrorMessage: any,\n  setPinnedCountries: any,\n}\n\nconst Search: React.FC<Props> = ({ countryList, pinnedCountries, setCountryList, setSavingFavorites,\n  setLoading, setErrorMessage, setPinnedCountries }) => {\n\n  // Loads the countries from restcountries api\n  const loadCountries = async (name: string) => {\n    setLoading(true);\n    setErrorMessage('');\n    setSavingFavorites(true);\n    fetchCountries(name)\n      .then((countries) => {\n        setCountryList(countries.slice(0, 5));\n        setLoading(false);\n        setSavingFavorites(false);\n      })\n      .catch((error) => {\n        console.log('My', error);\n        setCountryList([]);\n        setErrorMessage(error.toString());\n        setLoading(false);\n        setSavingFavorites(false);\n      })\n  }\n\n  /*\n  Handles pinning the country\n  If we can connect to the backend api, saves the selection to backend and reload pinned data from backend\n  If backend is not reachable, we pin the data in memory and updates the frontend\n  */\n  const handlePinCountries = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    const numericCode = event.currentTarget.getAttribute('value');\n    if (isNotPinned(numericCode)) {\n      const country: Country | undefined = countryList.find((e: any) => { return e.numericCode.toString().padStart(3, '0') === numericCode });\n      if (country) {\n        setSavingFavorites(true);\n        saveCountry(country)\n          .then(res => {\n            getCountries()\n              .then(res => {\n                setPinnedCountries(res.data)\n              }) // Error here is caught below\n            setSavingFavorites(false)\n          }\n          )\n          .catch(err => {\n            setPinnedCountries((pinnedCountries: Country[]) => [...pinnedCountries, country])\n            setSavingFavorites(true)\n          }); //ToDo: log error for monitoring and alert\n      }\n    }\n  }\n\n  // DRY: Function used by handlePinCountries and CountryListItem to check if the given country is pinned or not\n  const isNotPinned = (numericCode: number | string | null) => {\n    if (typeof numericCode === 'number') {  //Bug-fix: Our backend returns int, while restcountries return numericCOde as string\n      return !pinnedCountries.find((e: any) => { return e.numericCode === numericCode });\n    } else {\n      return !pinnedCountries.find((e: any) => { return e.numericCode.toString().padStart(3, '0') === numericCode });\n    }\n  }\n\n  return (\n    <div>\n      <InputGroup size=\"lg\">\n        <FormControl\n          aria-label=\"Large\"\n          aria-describedby=\"inputGroup-sizing-sm\"\n          placeholder=\"Start typing a country name here\"\n          onChange={(e) => loadCountries(e.target.value)}\n        />\n      </InputGroup>\n      <ListGroup>\n        {countryList.map((c, index) => {\n          return <CountryListItem\n            key={index}\n            country={c.name}\n            flag={c.flag}\n            numericCode={c.numericCode}\n            buttonDisplay={isNotPinned(c.numericCode)}\n            buttonText={'+'}\n            handleClick={handlePinCountries}\n          />\n        })}\n      </ListGroup>\n    </div>\n  );\n}\n\nexport default Search","import React from \"react\";\n\n// Api imports\nimport { deleteCountry } from \"../api/CountriesAPI\";\n\n// Component imports\nimport CountryListItem from \"./CountryListItem\";\n\n// Bootstrap imports\nimport ListGroup from \"react-bootstrap/ListGroup\";\n\n// Data types\nimport { Country } from \"../types/Country\";\n\ninterface Props {\n  pinnedCountries: Country[],\n  setSavingFavorites: any,\n  setPinnedCountries: any,\n}\n\nconst SelectedCountries: React.FC<Props> = ({ pinnedCountries, setSavingFavorites, setPinnedCountries }) => {\n\n  /*\n  Handles unpinning the selected country\n  If we can connect to the backend api, deletes the selection from backend and load from backend\n  Nonetheless, removes the selected country from the pinned list from the frontend\n  */\n  const handleUnpinCountries = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    const selectedNumericCode = event.currentTarget.getAttribute('value');\n    if (selectedNumericCode) {\n      const countryToRemove = (pinnedCountries.find((e: any) => {\n        return e.numericCode.toString().padStart(3, '0') === selectedNumericCode.padStart(3, '0')\n      }));\n\n      if (countryToRemove) {\n        setSavingFavorites(true)\n        deleteCountry(countryToRemove)\n          .then(setSavingFavorites(false))\n          .catch(setSavingFavorites(false)) //ToDo: log error for monitoring and alert\n          .finally(() => {\n            const newPinnedCountries = (pinnedCountries.filter((e: any) => {\n              return e.numericCode.toString().padStart(3, '0') !== selectedNumericCode.padStart(3, '0')\n            }));\n            setPinnedCountries(newPinnedCountries);\n          })\n      }\n    }\n  }\n\n  return (\n    <ListGroup>\n      {pinnedCountries.map((c, index) => {\n        return <CountryListItem\n          key={index}\n          country={c.name}\n          flag={c.flag}\n          numericCode={c.numericCode}\n          buttonDisplay={true}\n          buttonText={'x'}\n          handleClick={handleUnpinCountries}\n        />\n      })}\n    </ListGroup>\n  );\n}\n\nexport default SelectedCountries;","import React from 'react';\n\n// Bootstrap imports\nimport Spinner from 'react-bootstrap/Spinner';\nimport Alert from 'react-bootstrap/Alert';\n\nexport interface Props {\n  loading: boolean;\n  errorMessage: string;\n}\n\nconst DisplayAlert: React.FC<Props> = ({ loading, errorMessage }) => {\n  return (\n    <div className=\"mt-5\">\n      {\n        loading ?\n          <Alert variant=\"success\"><Spinner animation=\"border\" /> Loading ...</Alert>\n          :\n          errorMessage && <Alert variant=\"danger\">{errorMessage}</Alert>\n      }\n    </div>\n  );\n}\n\nexport default DisplayAlert;","import React, { useState, useEffect } from 'react';\n\n// Api imports\nimport { getCountries } from './api/CountriesAPI';\n\n// Component imports\nimport Search from './components/Search';\nimport SelectedCountries from './components/SelectedCountries';\nimport DisplayAlert from './components/DisplayAlert';\n\n// Bootstrap imports\nimport Card from 'react-bootstrap/Card';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\n\n\n/* \nThe entire app that gets rendered in the \"root\" \nelement of the page\n*/\nconst ListSearchApp = () => {\n  const [loading, setLoading] = useState(false);\n  const [savingFavorites, setSavingFavorites] = useState(false);\n  const [countryList, setCountryList] = useState([]);\n  const [pinnedCountries, setPinnedCountries] = useState([]);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  useEffect(() => {\n    if (!savingFavorites && pinnedCountries.length === 0) {\n      setLoading(true);\n      getCountries()\n        .then(res => {\n          if (res.data.length > 0) { // Set set Pinned countries only if we have data from api.\n            setPinnedCountries(res.data)\n          }\n          setLoading(false);\n        })\n        .catch(() => setLoading(false)); //ToDo: log error for monitoring and alert\n    }\n  }, [savingFavorites, pinnedCountries]);\n\n  return (\n    <Container fluid className=\"p-2\">\n      <Row>\n        <Col md=\"5\">\n          <Card>\n            <Card.Header as=\"h4\">Look up countries</Card.Header>\n            <Card.Body>\n              {<Search\n                countryList={countryList}\n                pinnedCountries={pinnedCountries}\n                setCountryList={setCountryList}\n                setSavingFavorites={setSavingFavorites}\n                setLoading={setLoading}\n                setErrorMessage={setErrorMessage}\n                setPinnedCountries={setPinnedCountries}\n              />}\n            </Card.Body>\n          </Card>\n        </Col>\n        <Col md=\"2\">\n          <DisplayAlert\n            loading={loading}\n            errorMessage={errorMessage}\n          />\n        </Col>\n        <Col md=\"5\">\n          <Card>\n            <Card.Header as=\"h4\">Selected Countries</Card.Header>\n            <Card.Body>\n              {<SelectedCountries\n                pinnedCountries={pinnedCountries}\n                setSavingFavorites={setSavingFavorites}\n                setPinnedCountries={setPinnedCountries} />}\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default ListSearchApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './ListSearchApp';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}